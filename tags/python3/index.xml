<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python3 on Jay Vala</title><link>https://jdvala.github.io/tags/python3/</link><description>Recent content in python3 on Jay Vala</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2020, Jay Vala. Theme - Origin by Andrey Parfenov</copyright><lastBuildDate>Mon, 15 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jdvala.github.io/tags/python3/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing my own little interactive python environment</title><link>https://jdvala.github.io/posts/2021-02-15-my-own-ipython/</link><pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate><guid>https://jdvala.github.io/posts/2021-02-15-my-own-ipython/</guid><description>Wouldn&amp;rsquo;t it be cool to build just for fun one of the most used and beloved tool in Data Science and Python community, the Interactive Python (ipython) shell.
The other day I was watching youtube videos, learning all about python and I came across this video by Sebastiaan Mathôt, in which he had built his own ipython shell. I thought it was very cool and I wanted to replicate it. The link for the video is here</description></item><item><title>Walrus Operator - The new and shinny Python 3.8</title><link>https://jdvala.github.io/posts/2019-10-15-walrus-operator-python3.8/</link><pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate><guid>https://jdvala.github.io/posts/2019-10-15-walrus-operator-python3.8/</guid><description>Yesterday we have welcomed python 3.8 with much fun fair. The whole change log can be found here but the highlight of the new python is the Walrus Operator.
According to the official documentation := will be the new walrus operator. This syntax assigns values to variables as a part of larger expression
Consider the following code snippet
if len(a) &amp;gt; 10: n = len(a) print(f&amp;#34;List is too long expected len &amp;lt; 10 but found {n}&amp;#34;) In the above expression len(a) is redundent but we can not help but write it twice, but not in python 3.</description></item></channel></rss>