<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AI on Jay Vala</title><link>https://jdvala.github.io/tags/ai/</link><description>Recent content in AI on Jay Vala</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Â© 2020, Jay Vala. Theme - Origin by Andrey Parfenov</copyright><lastBuildDate>Tue, 23 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://jdvala.github.io/tags/ai/index.xml" rel="self" type="application/rss+xml"/><item><title>Tensorboard</title><link>https://jdvala.github.io/posts/2018-10-23-visualizing-model-using-tensorboard/</link><pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate><guid>https://jdvala.github.io/posts/2018-10-23-visualizing-model-using-tensorboard/</guid><description>In this assignment we are going to use Tensorboard a tool provided with tensorflow to visualize and debug(if necessary) our neural networks visually. I am going to visualize all the parameteres that have the properties which enables us to debug our neural networks or gives us a fair intution on how and what goes wrong.
I will try and do this assignment in google colab, although it will be difficult, I will try my best.</description></item><item><title>Multilayer Perceptron</title><link>https://jdvala.github.io/posts/2018-10-13-mnist-multilayer-perceptron/</link><pubDate>Sat, 13 Oct 2018 00:00:00 +0000</pubDate><guid>https://jdvala.github.io/posts/2018-10-13-mnist-multilayer-perceptron/</guid><description>Introduction to Deep Learning Assignment 1: Multilayer Perceptron MNIST Dataset NOTE: This Tutorial was done on google colab so it includes some google cloud helper functions.
In this assignment we are going to build a very basic deep learning model called as multilayer perceptron. Also we are going to expriment on it a little bit as suggested on the course website.
Multilayer Perceptron Multilayer perceptron is a type of feed forward network, it has minimum 3 layers(although we don&amp;rsquo;t count input and output as layers) input layer, hidden layer and output layer.</description></item><item><title>LSTM with 8 Classes</title><link>https://jdvala.github.io/posts/2018-05-25-rnn-sequence-classification-with-modifications/</link><pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate><guid>https://jdvala.github.io/posts/2018-05-25-rnn-sequence-classification-with-modifications/</guid><description>New LSTM with 8 classes In this script I will be using only 8 out of 32 classes that were originaly present in the dataset, this is necessary because the data in other classes is much less compared to these 8 classes, this makes it difficult for the neural network to learn anything off of those classes.
import pickle from gensim.models import Word2Vec import keras import numpy as np import pandas as pd from keras.</description></item><item><title>Quantitative Analysis of Dataset</title><link>https://jdvala.github.io/posts/2018-05-22-dataset-quantitative-analysis/</link><pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate><guid>https://jdvala.github.io/posts/2018-05-22-dataset-quantitative-analysis/</guid><description>I have got bad results after training the RNN. Hence I have decided to analyse the data set and see the distribution of samples across different classes. This may give me some idea to why my network is performing poor.
import pandas as pd from collections import Counter import numpy as np data = pd.read_csv(&amp;#39;/home/jay/Data_Set_Creation/Data_to_Use.csv&amp;#39;) data.columns Index(['Sentence', 'Label', 'Numerical_Label'], dtype='object') labels = data.Numerical_Label.tolist() After the labels are into the list, I will count the number of samples in each class to see what is the distribution.</description></item><item><title>(UPDATED)Sequence Classification using Recurrent Neural Networks</title><link>https://jdvala.github.io/posts/2018-05-18-rnn_english/</link><pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate><guid>https://jdvala.github.io/posts/2018-05-18-rnn_english/</guid><description>Update: Please go to the end of the post to see the updated results.
Aim: The aim of this model is to classify sentences. I am going to use Recurrent Neural Network for this purpose, specifically LSTMs. LSTMs have an advantage compared to simple RNN cell or GRU cell. You can learn about LSTMs and RNNs, There is no point on going in detail here. May be I will write another post wherein I will describe RNNs and LSTMs more intutively, but for today these two links will suffice.</description></item></channel></rss>